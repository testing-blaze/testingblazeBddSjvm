package com.automation.ryder.controller.configuration;

import com.automation.ryder.controller.browsingdevices.BrowsingDeviceBucket;
import io.cucumber.java.Scenario;


public class ScenarioController {

    private static DeviceDriver device;
    public ScenarioController(BrowsingDeviceBucket device) {
        this.device=device;
    }
    private int totalNumberOfScenarios = 0;
    private int executedScenarioCount = 0;
    private int failedScenarioCount = 0;

    private Scenario scenario;

    /*
    void setScenario(Scenario scenario) {
        this.scenario=scenario;
        if (totalNumberOfScenarios == 0) {
            setTotalNumberOfScenarios();
        }

        executedScenarioCount++;
    }*/

    public Scenario getScenario() {
        return scenario;
    }
    public void setScenario(Scenario scenario) {
        this.scenario=scenario;
    }
/*
    public static int getExecutedScenarioCount() {
        return executedScenarioCount;
    }
    public static int getTotalScenarioCount() {
        return totalNumberOfScenarios;
    }*/

    void printInitialLogs() {
        System.out.println("--------------------------------------------------------------------------------");
        System.out.println("************************** Running Now **************************************");
        System.out.println("--------------------------------------------------------------------------------");
        //System.out.println("Scenario Number in Current Execution: " + getExecutedScenarioCount() + " / " + totalNumberOfScenarios);
        System.out.println("Scenario Name: " + getScenario().getName());
        System.out.println("Scenario Tags: " + getScenario().getSourceTagNames());
        System.out.println("Controlling DI instance # " + device.hashCode());
        System.out.println("Controlling WebDriver instance # " + device.getDriver().hashCode());
        System.out.println("--------------------------------------------------------------------------------");

    }

    void printFinalLogs() {
        if (scenario.isFailed()) {
            failedScenarioCount++;
        }
        /*
        User.performs().updatingOfReportWith().newLine();
        User.performs().updatingOfReportWith().write(LogLevel.INFO,  "Scenario Result Analysis:");
        User.performs().updatingOfReportWith().write(LogLevel.EMPTY_LABEL,  "                          Successful / Failed / Total scenarios: "
                + (executedScenarioCount - failedScenarioCount) + " / "  + failedScenarioCount + " / " + totalNumberOfScenarios);
        User.performs().updatingOfReportWith().newLine();

        if (!"false".equalsIgnoreCase(System.getProperty("printConsoleLogs"))) {
            System.out.println();
            System.out.println("Suite Execution Summary:");
            System.out.println("Successful / Failed / Total scenarios: "
                    + (executedScenarioCount - failedScenarioCount) + " / "  + failedScenarioCount + " / " + totalNumberOfScenarios);
            System.out.println();
        }*/
    }

    /**
     * Gets the total number of scenarios that will be executed in this suite.
     * It does so by counting the number of files in the /target/parallet/features folder, which are generated by Cucable.
     * If, in the future, we no longer use Cucable this solution will no longer work.
     * In that case, the total number of scenarios <i>should</i> just display as "0" until it is fixed.
     */
    /*
    void setTotalNumberOfScenarios() {
        try {
            totalNumberOfScenarios = Objects.requireNonNull((new File(System.getProperty("user.dir") + "/target/parallel/features")).list()).length;
        } catch (NullPointerException e) {
            User.performs().updatingOfReportWith().write(LogLevel.ERROR,
                   "The directory '" + System.getProperty("user.dir") + "/target/parallel/features' was not found, or is not a directory."
            );
        }
    }*/
}
